version: "3.8"

x-kafka-common-env: &kafka-common-env # KRaft settings
  CLUSTER_ID: "ciVva32pQkC5OMiXUF_O2w"
  KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
  KAFKA_PROCESS_ROLES: "broker,controller"
  KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
  KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
  KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
  # Common settings
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

networks:
  kafka-net:
    driver: bridge

services:
  kafka1:
    image: apache/kafka:4.1.0
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      <<: *kafka-common-env
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093"
    networks:
      - kafka-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka1:9092 --list > /dev/null || exit 1",
        ]
      interval: 15s
      timeout: 30s
      retries: 10
      start_period: 40s

  kafka2:
    image: apache/kafka:4.1.0
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      <<: *kafka-common-env
      KAFKA_NODE_ID: 2
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093"
    networks:
      - kafka-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka2:9092 --list > /dev/null || exit 1",
        ]
      interval: 15s
      timeout: 30s
      retries: 10
      start_period: 40s

  kafka3:
    image: apache/kafka:4.1.0
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      <<: *kafka-common-env
      KAFKA_NODE_ID: 3
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093"
    networks:
      - kafka-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka3:9092 --list > /dev/null || exit 1",
        ]
      interval: 15s
      timeout: 30s
      retries: 10
      start_period: 40s

  postgres-order:
    image: postgres:17
    container_name: postgres-order
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_ORDER_DB}
    ports:
      - "5432:5432"
    volumes:
      - order-data:/var/lib/postgresql/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_ORDER_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  order:
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
    container_name: order
    depends_on:
      postgres-order:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/${POSTGRES_ORDER_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
    networks:
      - kafka-net
    ports:
      - "8080:8080" # order 서비스의 8080 포트를 호스트의 8080 포트로 노출
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres-payment:
    image: postgres:17
    container_name: postgres-payment
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_PAYMENT_DB}
    ports:
      - "5433:5432" # Use a different host port to avoid conflict
    volumes:
      - payment-data:/var/lib/postgresql/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_PAYMENT_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment:
    build:
      context: .
      dockerfile: ./apps/payment/Dockerfile
    container_name: payment
    depends_on:
      postgres-payment:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-payment:5432/${POSTGRES_PAYMENT_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
    networks:
      - kafka-net
    ports:
      - "8081:8081" # payment 서비스의 8081 포트를 호스트의 8081 포트로 노출
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres-inventory:
    image: postgres:17
    container_name: postgres-inventory
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_INVENTORY_DB}
    ports:
      - "5434:5432" # Use a different host port to avoid conflict
    volumes:
      - inventory-data:/var/lib/postgresql/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_INVENTORY_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory:
    build:
      context: .
      dockerfile: ./apps/inventory/Dockerfile
    container_name: inventory
    depends_on:
      postgres-inventory:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory:5432/${POSTGRES_INVENTORY_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
    networks:
      - kafka-net
    ports:
      - "8082:8082" # inventory 서비스의 8082 포트를 호스트의 8082 포트로 노출
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  order-data:
  payment-data:
  inventory-data:
